{"ast":null,"code":"/**\n * Copyright (c) 2015-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict'; // WARNING: this code is untranspiled and is used in browser too.\n// Please make sure any changes are in ES5 or contribute a Babel compile step.\n// Some custom utilities to prettify Webpack output.\n// This is quite hacky and hopefully won't be needed when Webpack fixes this.\n// https://github.com/webpack/webpack/issues/2878\n\nvar chalk = require('chalk');\n\nvar friendlySyntaxErrorLabel = 'Syntax error:';\n\nfunction isLikelyASyntaxError(message) {\n  return message.indexOf(friendlySyntaxErrorLabel) !== -1;\n} // Cleans up webpack error messages.\n// eslint-disable-next-line no-unused-vars\n\n\nfunction formatMessage(message, isError) {\n  var lines = message.split('\\n');\n\n  if (lines.length > 2 && lines[1] === '') {\n    // Remove extra newline.\n    lines.splice(1, 1);\n  } // Remove webpack-specific loader notation from filename.\n  // Before:\n  // ./~/css-loader!./~/postcss-loader!./src/App.css\n  // After:\n  // ./src/App.css\n\n\n  if (lines[0].lastIndexOf('!') !== -1) {\n    lines[0] = lines[0].substr(lines[0].lastIndexOf('!') + 1);\n  }\n\n  lines = lines.filter(function (line) {\n    // Webpack adds a list of entry points to warning messages:\n    //  @ ./src/index.js\n    //  @ multi react-scripts/~/react-dev-utils/webpackHotDevClient.js ...\n    // It is misleading (and unrelated to the warnings) so we clean it up.\n    // It is only useful for syntax errors but we have beautiful frames for them.\n    return line.indexOf(' @ ') !== 0;\n  }); // line #0 is filename\n  // line #1 is the main error message\n\n  if (!lines[0] || !lines[1]) {\n    return lines.join('\\n');\n  } // Cleans up verbose \"module not found\" messages for files and packages.\n\n\n  if (lines[1].indexOf('Module not found: ') === 0) {\n    lines = [lines[0], // Clean up message because \"Module not found: \" is descriptive enough.\n    lines[1].replace(\"Cannot resolve 'file' or 'directory' \", '').replace('Cannot resolve module ', '').replace('Error: ', '').replace('[CaseSensitivePathsPlugin] ', '')];\n  } // Cleans up syntax error messages.\n\n\n  if (lines[1].indexOf('Module build failed: ') === 0) {\n    lines[1] = lines[1].replace('Module build failed: SyntaxError:', friendlySyntaxErrorLabel);\n  } // Clean up export errors.\n  // TODO: we should really send a PR to Webpack for this.\n\n\n  var exportError = /\\s*(.+?)\\s*(\")?export '(.+?)' was not found in '(.+?)'/;\n\n  if (lines[1].match(exportError)) {\n    lines[1] = lines[1].replace(exportError, \"$1 '$4' does not contain an export named '$3'.\");\n  }\n\n  lines[0] = chalk.inverse(lines[0]); // Reassemble the message.\n\n  message = lines.join('\\n'); // Internal stacks are generally useless so we strip them... with the\n  // exception of stacks containing `webpack:` because they're normally\n  // from user code generated by WebPack. For more information see\n  // https://github.com/facebookincubator/create-react-app/pull/1050\n\n  message = message.replace(/^\\s*at\\s((?!webpack:).)*:\\d+:\\d+[\\s)]*(\\n|$)/gm, ''); // at ... ...:x:y\n\n  return message.trim();\n}\n\nfunction formatWebpackMessages(json) {\n  var formattedErrors = json.errors.map(function (message) {\n    return formatMessage(message, true);\n  });\n  var formattedWarnings = json.warnings.map(function (message) {\n    return formatMessage(message, false);\n  });\n  var result = {\n    errors: formattedErrors,\n    warnings: formattedWarnings\n  };\n\n  if (result.errors.some(isLikelyASyntaxError)) {\n    // If there are any syntax errors, show just them.\n    // This prevents a confusing ESLint parsing error\n    // preceding a much more useful Babel syntax error.\n    result.errors = result.errors.filter(isLikelyASyntaxError);\n  }\n\n  return result;\n}\n\nmodule.exports = formatWebpackMessages;","map":null,"metadata":{},"sourceType":"script"}